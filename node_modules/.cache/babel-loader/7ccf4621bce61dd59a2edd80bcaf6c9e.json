{"ast":null,"code":"var _jsxFileName = \"/home/gvnbleid/development/stroop-effect/front/src/App.tsx\";\nimport React, { Component } from 'react';\nimport { StimulusForm } from './components/StimulusForm';\nimport { BreakScreen } from './components/BreakScreen';\nimport { Stopwatch } from \"ts-stopwatch\";\nimport Button from '@material-ui/core/Button';\nimport * as request from 'request';\nconst numberOfSets = 3;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.stopwatch = new Stopwatch();\n    this.state = {\n      stimulus: {\n        name: \"tygrys\",\n        color: 'blue'\n      },\n      stimuli: []\n    };\n    this.shouldLoadNextSet = false;\n    this.testOver = false;\n    this.currentSet = 0;\n    this.set_1 = [];\n    this.set_2 = [];\n    this.set_3 = [];\n    this.currentQuestion = 0;\n\n    this.onAnswer = event => {\n      event.preventDefault();\n      this.setState(previousState => {\n        var x = previousState.stimuli.shift();\n\n        if (x == null) {\n          console.log(\"set finished\");\n\n          if (this.currentSet < numberOfSets) {\n            this.shouldLoadNextSet = true;\n          } else {\n            this.testOver = true;\n          }\n\n          this.forceUpdate();\n          return;\n        }\n\n        const slice = this.stopwatch.slice();\n\n        switch (this.currentSet) {\n          case 1:\n            this.set_1.push({\n              id: this.currentQuestion,\n              time: slice.duration\n            });\n            break;\n\n          case 2:\n            this.set_2.push({\n              id: this.currentQuestion,\n              time: slice.duration\n            });\n            break;\n\n          case 3:\n            this.set_3.push({\n              id: this.currentQuestion,\n              time: slice.duration\n            });\n            break;\n        }\n\n        this.currentQuestion++;\n        return {\n          stimulus: {\n            name: x.name,\n            color: x.color\n          },\n          stimuli: [...previousState.stimuli]\n        };\n      });\n    };\n\n    this.getSet = index => {\n      request.get(\"http://localhost:3001/stimuli/getPackage?field=\".concat(index), (request, response) => {\n        const stimuli = JSON.parse(response.body);\n        console.log(stimuli);\n        this.setState(prevState => {\n          const stimulus = stimuli.shift();\n          return {\n            stimulus: stimulus,\n            stimuli: stimuli\n          };\n        });\n      });\n      this.currentSet++;\n    };\n\n    this.sendData = () => {\n      const jsonData = {\n        set_1: this.set_1,\n        set_2: this.set_2,\n        set_3: this.set_3\n      };\n      const stringified = JSON.stringify(jsonData);\n      console.log(stringified);\n      const options = {\n        body: stringified,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      request.post('http://localhost:3001/answers/addUserData', options, (req, res) => {\n        console.log('request: ' + req.body);\n        const answer = JSON.parse(res.body);\n        console.log('response: ' + answer);\n      });\n    };\n\n    this.onClick = () => {\n      this.shouldLoadNextSet = false;\n      this.getSet(this.currentSet);\n    };\n\n    this.loadNextSet = () => {\n      return React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Zako\\u0144czy\\u0142e\\u015B odpowiadanie na zestaw. Poczekaj 2 min i kliknij w przycisk, aby przej\\u015B\\u0107 do nast\\u0119pnego zestawu\"), React.createElement(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        \"text-align\": \"center\",\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Nast\\u0119pny zestaw\"));\n    };\n\n    this.finishTest = () => {\n      this.sendData();\n      return React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Gratulacje, zako\\u0144czy\\u0142e\\u015B test!\"));\n    };\n  }\n\n  componentDidMount() {\n    console.log('triggered');\n    this.getSet(this.currentSet);\n  }\n\n  render() {\n    if (this.testOver) {\n      return this.finishTest();\n    }\n\n    if (this.shouldLoadNextSet) {\n      return React.createElement(BreakScreen, {\n        breakTime: 120000,\n        onTimePassed: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      });\n    }\n\n    this.stopwatch.start();\n    return React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(StimulusForm, {\n      stimulus: this.state.stimulus,\n      onAnswer: this.onAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }))), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.stopwatch.getCompletedSlices().map(slice => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, slice.startTime, \"; \", slice.endTime, \"; \", slice.duration);\n    }))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/gvnbleid/development/stroop-effect/front/src/App.tsx"],"names":["React","Component","StimulusForm","BreakScreen","Stopwatch","Button","request","numberOfSets","App","stopwatch","state","stimulus","name","color","stimuli","shouldLoadNextSet","testOver","currentSet","set_1","set_2","set_3","currentQuestion","onAnswer","event","preventDefault","setState","previousState","x","shift","console","log","forceUpdate","slice","push","id","time","duration","getSet","index","get","response","JSON","parse","body","prevState","sendData","jsonData","stringified","stringify","options","headers","post","req","res","answer","onClick","loadNextSet","display","justifyContent","alignItems","finishTest","componentDidMount","render","start","getCompletedSlices","map","startTime","endTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { StimulusForm } from './components/StimulusForm';\nimport { BreakScreen } from './components/BreakScreen';\nimport { Stimulus } from './models/stimulus';\nimport { Stopwatch } from \"ts-stopwatch\"\nimport Button from '@material-ui/core/Button';\nimport * as request from 'request'\n\ninterface State {\n  stimulus: Stimulus;\n  stimuli: Stimulus[];\n}\n\nconst numberOfSets = 3;\n\nclass App extends Component<{}, State> {\n  stopwatch = new Stopwatch();\n\n  state = {\n    stimulus: {\n      name: \"tygrys\",\n      color: 'blue'\n    },\n    stimuli: [],\n  };\n\n  shouldLoadNextSet: boolean = false;\n  testOver: boolean = false;\n  currentSet: number = 0;\n\n  set_1: {id: number, time: number}[] = [];\n  set_2: {id: number, time: number}[] = [];\n  set_3: {id: number, time: number}[] = [];\n\n  currentQuestion: number = 0;\n  \n  private onAnswer = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    this.setState(previousState => {\n      var x = previousState.stimuli.shift();\n      \n      if(x == null) {\n        console.log(\"set finished\");\n        if(this.currentSet < numberOfSets) {\n          this.shouldLoadNextSet = true;\n        } else {\n          this.testOver = true;\n        }\n        \n        this.forceUpdate();\n        return;\n      }\n\n      const slice = this.stopwatch.slice();\n\n      switch(this.currentSet) {\n        case 1:\n          this.set_1.push({id: this.currentQuestion, time: slice.duration});\n          break;\n        case 2:\n          this.set_2.push({id: this.currentQuestion, time: slice.duration});\n          break;\n        case 3:\n          this.set_3.push({id: this.currentQuestion, time: slice.duration});\n          break;\n      }\n\n      this.currentQuestion++;\n\n      return ({\n        stimulus: {\n          name: x.name,\n          color: x.color\n        },\n        stimuli: [...previousState.stimuli]\n      })\n    });\n  };\n\n  private getSet = (index: number) => {\n    request.get(`http://localhost:3001/stimuli/getPackage?field=${index}`, (request:any, response: any) => {\n      const stimuli : {name: string, color: string}[] = JSON.parse(response.body);\n      console.log(stimuli);\n      this.setState((prevState) => {\n        const stimulus : {name:string, color: string} = stimuli.shift() as {name:string, color: string};\n        return({\n          stimulus: stimulus,\n          stimuli: stimuli\n        });\n      });\n    })\n    this.currentSet++;\n  };\n\n  private sendData = () => {\n    const jsonData = {\n      set_1: this.set_1,\n      set_2: this.set_2,\n      set_3: this.set_3\n    }\n\n    const stringified = JSON.stringify(jsonData);\n    console.log(stringified);\n\n    const options = {\n      body: stringified,\n      headers: {'Content-Type' : 'application/json'},\n    }\n    request.post('http://localhost:3001/answers/addUserData', options, (req: any, res: any) => {\n      console.log('request: ' + req.body);\n      const answer : {name: string, color: string}[] = JSON.parse(res.body);\n      console.log('response: ' + answer);\n    })\n  }\n\n  private onClick = () => {\n    this.shouldLoadNextSet = false;\n    this.getSet(this.currentSet);\n  };\n\n  private loadNextSet = () => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <p>Zakończyłeś odpowiadanie na zestaw. Poczekaj 2 min i kliknij w przycisk, aby przejść do następnego zestawu</p>\n        <Button type=\"submit\" variant=\"contained\" text-align=\"center\" onClick={this.onClick}>Następny zestaw</Button>\n      </div>\n    );\n  };\n\n  private finishTest = () => {\n    this.sendData();\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <p>Gratulacje, zakończyłeś test!</p>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    console.log('triggered');\n    this.getSet(this.currentSet);\n  }\n\n  render() {   \n    if(this.testOver) {\n      return this.finishTest();\n    }\n\n    if(this.shouldLoadNextSet) {\n      return (<BreakScreen breakTime={120000} onTimePassed={this.onClick}/>);\n\n    }\n    this.stopwatch.start();\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <table>\n          <tr>\n            <td>\n              <StimulusForm stimulus={this.state.stimulus} onAnswer={this.onAnswer}/>\n            </td>\n          </tr>\n\n          <tr>\n            <td>\n              <ol>\n                {this.stopwatch.getCompletedSlices().map(slice => {\n                  return (<li>{slice.startTime}; {slice.endTime}; {slice.duration}</li>);\n                  })\n                }\n              </ol>\n            </td>\n          </tr>\n        </table>\n      </div>\n    );\n  };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}